# Абстрактные классы в объектно-ориентированном программировании являются
# ключевым инструментом для создания структур, которые определяют
# обязательные методы для всех наследующих классов,
# не реализуя при этом полное поведение.
#
# Абстрактные классы используются для определения интерфейсов,
# в которых часть поведения делегируется подклассам.

# Определение абстрактного класса
#
# Абстрактный класс — это класс, который не может быть инстанциирован
# (то есть нельзя создать объект этого класса напрямую)
# и который предназначен для того, чтобы служить базовым классом
# для других классов.
#
# В Python абстрактные классы часто создаются с использованием
# модуля abc (Abstract Base Classes).

# Цель использования абстрактных классов
#
# Абстрактные классы предоставляют собой шаблон, который
# должен быть реализован во всех производных классах:
#
#     Они устанавливают общий интерфейс для группы классов.
#     Они могут предоставлять некоторую базовую функциональность,
#       наследуемую подклассами.
#     Они принуждают разработчиков реализовать определённые
#       методы в дочерних классах.
#

from abc import ABC, abstractmethod


class Vehicle(ABC):
    @abstractmethod  # в дочерних классах этот метод обязан быть переопределён
    def drive(self):
        """Переместить транспортное средство вперёд"""
        pass

    @staticmethod
    def stop():
        """Остановить транспортное средство"""
        print("The vehicle is stopped.")


class Car(Vehicle):
    def drive(self):
        print("Car is driving on the road.")


class Boat(Vehicle):
    def drive(self):
        print("Boat is sailing on the water.")


c = Car()
c.drive()
c.stop()
